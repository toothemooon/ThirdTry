import { createClient } from '@supabase/supabase-js';

// User provided credentials
const SUPABASE_URL = 'https://yqoigziaqznsenpxkkwx.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Inlxb2lnemlhcXpuc2VucHhra3d4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDYyODM0NDQsImV4cCI6MjA2MTg1OTQ0NH0.Z2FJgvja6KqXgJgXQHdJIhNon4xLxqVDmnS0fOWtnAQ';

const supabase = createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

// The name of the table we want to create and test
const TEST_TABLE = 'test_items';

async function testTableConnection() {
  console.log('🔄 Testing Supabase connection...');
  console.log(`Supabase URL: ${SUPABASE_URL}`);
  
  try {
    // 1. First, let's check if the test table exists
    console.log(`\n🔍 Checking if '${TEST_TABLE}' table exists...`);
    let { error: queryError } = await supabase
      .from(TEST_TABLE)
      .select('*')
      .limit(1)
      .maybeSingle();
    
    const tableExists = !queryError || !queryError.message.includes('does not exist');
    
    if (tableExists) {
      console.log(`✅ Table '${TEST_TABLE}' exists!`);
    } else {
      console.log(`❌ Table '${TEST_TABLE}' does not exist. Let's create it in the Supabase dashboard.`);
      console.log('\nTo create the table in Supabase:');
      console.log('1. Go to https://app.supabase.com/project/_/editor');
      console.log('2. In the SQL editor, run this SQL:');
      console.log(`
        CREATE TABLE ${TEST_TABLE} (
          id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          name TEXT NOT NULL,
          description TEXT,
          created_at TIMESTAMPTZ DEFAULT NOW()
        );
      `);
      console.log('\nAfter creating the table, run this script again.');
      
      // Let's try inserting into a different built-in table
      console.log('\n🔄 Trying to access some built-in tables instead...');
      
      // Check if the auth.users table is accessible
      const { data: authUsers, error: authError } = await supabase
        .from('users')
        .select('count')
        .limit(1);
      
      if (authError) {
        console.log('❌ Cannot access users table:', authError.message);
      } else {
        console.log('✅ Successfully accessed users table!');
        console.log('Users count result:', authUsers);
      }
      
      return;
    }
    
    // 2. Insert test data
    console.log('\n📝 Step 2: Inserting test data...');
    const testItem = {
      name: `Test item ${new Date().toISOString()}`,
      description: 'This is a test item to verify Supabase connection'
    };
    
    const { data: insertData, error: insertError } = await supabase
      .from(TEST_TABLE)
      .insert(testItem)
      .select();
    
    if (insertError) {
      console.error('❌ Error inserting data:', insertError.message);
      
      if (insertError.message.includes('permission denied')) {
        console.log('\n⚠️ Permission denied for insert operation.');
        console.log('This is often due to Row Level Security (RLS) policies.');
        console.log('To fix this, go to the Supabase dashboard:');
        console.log(`1. Navigate to the '${TEST_TABLE}' table`);
        console.log('2. Go to "Authentication" > "Policies"');
        console.log('3. Add a policy that allows inserts for anonymous users:');
        console.log(`   CREATE POLICY "Enable anonymous inserts" ON "${TEST_TABLE}" FOR INSERT TO anon WITH CHECK (true);`);
      }
    } else {
      console.log('✅ Data inserted successfully!');
      console.log('Inserted item:', insertData);
    }
    
    // 3. Query the data
    console.log('\n🔍 Step 3: Querying test data...');
    const { data: items, error: listError } = await supabase
      .from(TEST_TABLE)
      .select('*')
      .order('created_at', { ascending: false })
      .limit(5);
    
    if (listError) {
      console.error('❌ Error querying data:', listError.message);
      
      if (listError.message.includes('permission denied')) {
        console.log('\n⚠️ Permission denied for select operation.');
        console.log('To fix this, go to the Supabase dashboard:');
        console.log(`1. Navigate to the '${TEST_TABLE}' table`);
        console.log('2. Go to "Authentication" > "Policies"');
        console.log('3. Add a policy that allows selects for anonymous users:');
        console.log(`   CREATE POLICY "Enable anonymous reads" ON "${TEST_TABLE}" FOR SELECT TO anon USING (true);`);
      }
    } else {
      console.log('✅ Data query successful!');
      console.log('Latest items:', items);
    }
    
    // 4. Test auth service
    console.log('\n🔐 Step 4: Testing authentication service...');
    const { data: authData, error: authError } = await supabase.auth.getSession();
    
    if (authError) {
      console.error('❌ Auth service test failed:', authError.message);
    } else {
      console.log('✅ Auth service is working!');
      console.log('Session status:', authData.session ? 'Active' : 'No active session');
    }
    
  } catch (err) {
    console.error('❌ Unexpected error:', err);
  }
}

testTableConnection().then(() => {
  console.log('\n✅ Connection testing complete!');
}); 